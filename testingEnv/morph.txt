#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main() {
    // Load the image
    Mat img = imread("/home/trigger/Documents/GitHub/Parking_lot_occupancy/ParkingLot_dataset/sequence1/frames/2013-02-22_06_55_00.png");
    if (img.empty()) {
        cout << "Could not open or find the image" << endl;
        return -1;
    }

    // Convert to grayscale
    Mat gray;
    cvtColor(img, gray, COLOR_BGR2GRAY);

    // Apply GaussianBlur to reduce noise and improve contour detection
    GaussianBlur(gray, gray, Size(5, 5), 0);

    // Background Subtraction (assuming a simple threshold for illustration)
    Mat thresh;
    threshold(gray, thresh, 150, 255, THRESH_BINARY_INV);

    // Morphological operations to clean up the image
    Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3));
    morphologyEx(thresh, thresh, MORPH_CLOSE, kernel);
    morphologyEx(thresh, thresh, MORPH_OPEN, kernel);

    // Find contours
    vector<vector<Point>> contours;
    vector<Vec4i> hierarchy;
    findContours(thresh, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE);

    // Draw contours
    for (size_t i = 0; i < contours.size(); i++) {
        drawContours(img, contours, (int)i, Scalar(0, 255, 0), 2, LINE_8, hierarchy, 0);
    }

    // Display the result
    imshow("Segmented Cars", img);
    waitKey(0);

    return 0;
}